＜パーティションとは＞ 
ハードディスクの記憶領域を論理的に分割した領域のこと
データ整理: パーテーションを使用することで、異なる種類のデータやファイルを別々の領域に保存でき、データを整理しやすくなります。たとえば、オペレーティングシステム、プログラムファイル、ユーザーデータなどを異なるパーティションに格納できます。
システムのセキュリティと安定性: オペレーティングシステムを異なるパーティションに配置することで、システムの安定性を高め、オペレーティングシステムのクラッシュやデータの損失を軽減できます。また、異なるパーティションの権限設定を調整することで、セキュリティを向上させることも可能です。
バックアップとリカバリ: パーテーションごとに異なるバックアップスケジュールや方法を設定でき、データのバックアップとリカバリを容易にします。たとえば、システム用のパーティションとユーザーデータ用のパーティションを別々にバックアップできます。
複数のオペレーティングシステム: パーテーションを複数作成し、異なるオペレーティングシステムを同じコンピュータ上にインストールできます。これにより、デュアルブートや仮想マシン環境を構築できます。

＜ LVM とは＞
LVMというのは、まあ要するに「動的かつ自在にディスクのパーティションを変更できる仕組み」
例えば、あるディスクにパーティションが3個あったとして、それぞれをsdc1、sdc2、sdc3だったとします。通常、1から順にディスクの先頭からパーティションを割り付けて行きます。たとえばこんな感じに
 デバイス Boot      Start         End      Blocks   Id  System
/dev/sdc1               1          25      200781   83  Linux
/dev/sdc2              26         286     2096482+  83  Linux
/dev/sdc3             287        4421    33214387+  83  Linux
　シリンダ番号（StartとEndのところの数値）が隣接している状態なので、この状態でsdc2を拡張したい！ということになっても、そのままでは拡張できず、sdc3を一旦開放してからsdc2を拡張し、その後にsdc3を再度作成みたいなことをしないといけなくなる。ということは、sdc3が使用中だったりすると、その中身を一旦どこかに待避するなどの作業が必要になってしまう訳。
　Windows等の場合には、市販のソフトでそういう操作を全部自動でやってくれるものがあるけども、Linuxの場合にはLVMがそれをやってくれる…ということになる。
　また、LVMが突出して優れているのはパーティションを複数のディスクにまたがって作成できるという点。
　つまり、この点を強調すると、容量の小さな複数のディスクを1個の大きなディスクに束ねる…みたいな使い方もできるよ！ということ。

通常、linuxOSをインストールすると、ブート領域に第１バーティション「/dev/sda1」及び、システムの稼働に第２パーティション「/dev/sda2」が作成されます。

PE(フィジカルエクステント)
PEはLVMが扱う記憶領域で最小の単位で、デフォルトが4MB、最大65,536個まで作ることができる。

PV(フィジカルボリューム)
PVは物理的な記憶媒体のこと。
通常であればディスク1つに対して1対1だが、
複数パーティションで区切り、パーティション単位でPVを1対1で作成することも出来る。

VG(ボリュームグループ)
VGはPV(フィジカルボリューム)の管理を行います。
通常VG作成時に、PV(フィジカルボリューム)の中にデフォルト4MBでPE(フィジカルエクステント)が作られ、
複数のPV(フィジカルボリューム)でVG(ボリュームグループ)が作成されます。

LV(ロジカルボリューム)
LVは、実ファイルを格納する領域で
LV(ロジカルボリューム)はPV(フィジカルボリューム)の集合で作成されています。

PE(フィジカルエクステント),PV(フィジカルボリューム),VG(ボリュームグループ),LV(ロジカルボリューム) の関係性
HDD から PV(フィジカルボリューム) が作られ、
PV(フィジカルボリューム) は PE(フィジカルエクステント) の集まりで、 VG(ボリュームグループ) が作られる。
VG(ボリュームグループ) から LV(ロジカルボリューム) が作られ
LV(ロジカルボリューム) から パーティションが作られる

major（主要）番号: この番号は、カーネルがデバイスドライバと通信するための方法を識別します。異なるデバイスタイプ（ハードディスク、CD-ROM、ネットワークデバイスなど）には異なる主要番号があります。
minor（副次）番号: 主要番号の下で、特定のデバイスのインスタンスを識別する番号です。同じデバイスタイプ（たとえば、複数のハードディスクドライブ）に対して異なる副次番号が付けられます。
LVMでは、物理ボリュームもデバイスとして認識され、それぞれに固有の"maj:min"番号が割り当てられます。これにより、LVMが物理ボリュームを識別し、論理ボリュームを正確に配置できます
lsblk コマンドの出力において、パーテーションの "RM" と "RO" の値が "0" または "1" になる理由は、これらの値がそれぞれパーテーションの読み取りモード (Read Mode) と書き込みモード (Write Mode) を表すためです。
"RM" が "0" の場合：これは通常、読み取り専用モードを表します。パーテーションが "0" である場合、データの書き込みが許可されず、読み取りのみが許可されていることを示します。これは、データの保護やセキュリティの目的で読み取り専用に設定されたパーテーションである可能性があります。
"RM" が "1" の場合：これは読み取り/書き込みモードを表します。パーテーションが "1" である場合、データの読み取りと書き込みが許可されています。これは通常、通常のデータ書き込みが可能なパーテーションを示します。
同様に、"RO" が "0" の場合は読み取り専用であり、"RO" が "1" の場合は読み取り/書き込みが可能であることを示します。
この情報はパーテーションの状態や操作モードを把握するのに役立ちます。データの保護、修復、およびバックアップのために、必要に応じてパーテーションのモードを変更できます。

TYPE: パーティションまたはデバイスの種類。例えば、part はパーティション、disk はディスクを表します。
MOUNTPOINT: パーティションがマウントされている場所。この列にマウントポイントが指定されている場合、そのパーティションは実際にファイルシステムとしてマウントされており、指定されたディレクトリにアクセス可能です。上記の例では、/boot ディレクトリと /mnt/data ディレクトリがそれぞれ sda1 と sdb1 パーティションにマウントされています。
crypt: これは暗号化されたパーティションを示します。データの暗号化が有効になっている場合、パーティションは crypt として表示されます。暗号化を解除するためにパスワードまたは鍵が必要です。
rom: これは読み取り専用のデバイスまたはパーティションを示します。書き込みが許可されていないデバイスは rom として表示されます。通常、CD-ROM や DVD-ROM ドライブなどがこのカテゴリに含まれます。
lvm: これはLogical Volume Manager（LVM）が使用されているパーティションを示します。LVM を使用すると、複数の物理ディスクを単一の論理ボリュームにまとめたり、論理ボリュームを複数の物理デバイスに分散させたりすることができます。

logical volume manager (LVM)
ディスク管理機能 複数のハードディスクやパーティションにまたがった記憶領域を⼀つの論 理ボリューム(LV)にまとめて扱うことができる システムを停⽌せずに論理ボリュームの拡⼤・縮⼩を⾏える
これは、ボリュームを格納するための従来のパーティショニング スキームよりも柔軟な、大容量ストレージ デバイス上にスペースを割り当てる方法を提供します。
LVM（Logical Volume Manager）は、Linuxベースのオペレーティングシステムで使用されるストレージマネジメントツールの1つです。LVMは、物理的なストレージデバイス（ハードディスク、SSDなど）を抽象化し、論理ボリューム（Logical Volume）として管理することを可能にします。以下に、LVMの仕組みを詳しく説明します。
LVMの主要な構成要素と仕組み:
* 物理ボリューム（Physical Volume - PV）:
    * 物理ディスク（ハードディスク、SSD）を物理ボリュームとして扱います。物理ボリュームは、LVMで管理対象となるストレージデバイスです。物理ボリュームは、ディスク全体またはディスクの一部を指すことができます。
* ボリュームグループ（Volume Group - VG）:
    * 一つ以上の物理ボリュームをまとめて、ボリュームグループとしてグループ化します。ボリュームグループは、LVMでの論理ボリュームの管理単位です。
* 論理ボリューム（Logical Volume - LV）:
    * ボリュームグループから論理ボリュームを作成します。論理ボリュームは、通常のファイルシステムと同じように扱える論理的なストレージボリュームです。論理ボリュームは、サイズを調整したり、スナップショットを取ったりすることが可能です。
* ファイルシステム:
    * 論理ボリュームには、通常のファイルシステムを作成およびマウントできます。ユーザーは論理ボリューム上にデータを保存し、必要に応じて論理ボリュームのサイズを調整できます。
LVMの仕組みを説明する際の重要なポイント:
* 物理ボリューム（Physical Volume）をLVMに登録し、ボリュームグループ（Volume Group）に追加します。
* ボリュームグループ内で論理ボリューム（Logical Volume）を作成し、必要なサイズを指定します。
* 論理ボリュームは、通常のディスクパーティションのように扱えます。ファイルシステムを論理ボリュームに作成し、データを保存できます。
* 論理ボリュームのサイズを拡張したり、ボリュームグループに新しい物理ボリュームを追加してストレージ容量を増やしたりできます。
* スナップショット（Snapshot）を作成して、データのバックアップや復元を容易に行えます。
LVMは、ストレージの柔軟性と拡張性を向上させ、データ管理を効率化するために広く使用されています。システム管理者やデータベース管理者にとって便利なツールであり、ストレージの動的な管理を可能にします